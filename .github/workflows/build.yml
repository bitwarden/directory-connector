---
name: Build

on:
  push:
    branches-ignore:
      - 'l10n_master'


jobs:
  cloc:
    name: CLOC
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Set up CLOC
        run: |
          sudo apt update
          sudo apt -y install cloc

      - name: Print lines of code
        run: cloc --include-lang TypeScript,JavaScript,HTML,Sass,CSS --vcs git


  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Get Package Version
        id: retrieve-version
        run: |
          PKG_VERSION=$(jq -r .version src/package.json)
          echo "::set-output name=package_version::$PKG_VERSION"


  cli:
    name: CLI
    runs-on: windows-2019
    needs: setup
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
      _WIN_PKG_FETCH_VERSION: 14.17.6
      _WIN_PKG_VERSION: 3.2
    steps:
      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Setup Windows builder
        run: |
          choco install checksum --no-progress
          choco install reshack --no-progress

      - name: Set up Node
        uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea
        with:
          node-version: '14'

      - name: Update NPM
        run: |
          npm install -g npm@7
          npm install -g node-gyp
          node-gyp install $(node -v)

      - name: Setting WIN_PKG
        run: |
          echo "WIN_PKG=$env:WIN_PKG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"
        env:
          WIN_PKG: C:\Users\runneradmin\.pkg-cache\v3.0\fetched-v14.16.1-win-x64

      - name: Get pkg-fetch
        shell: pwsh
        run: |
          cd $HOME
          $fetchedUrl = "https://github.com/vercel/pkg-fetch/releases/download/v$env:_WIN_PKG_VERSION/node-v$env:_WIN_PKG_FETCH_VERSION-win-x64"

          New-Item -ItemType directory -Path ./.pkg-cache
          New-Item -ItemType directory -Path ./.pkg-cache/v$env:_WIN_PKG_VERSION
          Invoke-RestMethod -Uri $fetchedUrl `
            -OutFile "./.pkg-cache/v$env:_WIN_PKG_VERSION/fetched-v$env:_WIN_PKG_FETCH_VERSION-win-x64"

      - name: Keytar
        shell: pwsh
        run: |
          $keytarVersion = (Get-Content -Raw -Path ./src/package.json | ConvertFrom-Json).dependencies.keytar
          $nodeModVersion = node -e "console.log(process.config.variables.node_module_version)"
          $keytarTar = "keytar-v${keytarVersion}-node-v${nodeModVersion}-{0}-x64.tar"
          $keytarTarGz = "${keytarTar}.gz"
          $keytarUrl = "https://github.com/atom/node-keytar/releases/download/v${keytarVersion}/${keytarTarGz}"

          New-Item -ItemType directory -Path ./keytar/macos | Out-Null
          New-Item -ItemType directory -Path ./keytar/linux | Out-Null
          New-Item -ItemType directory -Path ./keytar/windows | Out-Null

          Invoke-RestMethod -Uri $($keytarUrl -f "darwin") -OutFile "./keytar/macos/$($keytarTarGz -f "darwin")"
          Invoke-RestMethod -Uri $($keytarUrl -f "linux") -OutFile "./keytar/linux/$($keytarTarGz -f "linux")"
          Invoke-RestMethod -Uri $($keytarUrl -f "win32") -OutFile "./keytar/windows/$($keytarTarGz -f "win32")"

          7z e "./keytar/macos/$($keytarTarGz -f "darwin")" -o"./keytar/macos"
          7z e "./keytar/linux/$($keytarTarGz -f "linux")" -o"./keytar/linux"
          7z e "./keytar/windows/$($keytarTarGz -f "win32")" -o"./keytar/windows"

          7z e "./keytar/macos/$($keytarTar -f "darwin")" -o"./keytar/macos"
          7z e "./keytar/linux/$($keytarTar -f "linux")" -o"./keytar/linux"
          7z e "./keytar/windows/$($keytarTar -f "win32")" -o"./keytar/windows"

      - name: Setup Version Info
        shell: pwsh
        run: |
          $major, $minor, $patch = $env:_PACKAGE_VERSION.split('.')

          $versionInfo = @"

          1 VERSIONINFO
          FILEVERSION $major,$minor,$patch,0
          PRODUCTVERSION $major,$minor,$patch,0
          FILEOS 0x40004
          FILETYPE 0x1
          {
          BLOCK "StringFileInfo"
          {
            BLOCK "040904b0"
            {
              VALUE "CompanyName", "Bitwarden Inc."
              VALUE "ProductName", "Bitwarden"
              VALUE "FileDescription", "Bitwarden Directory Connector CLI"
              VALUE "FileVersion", "$env:_PACKAGE_VERSION"
              VALUE "ProductVersion", "$env:_PACKAGE_VERSION"
              VALUE "OriginalFilename", "bwdc.exe"
              VALUE "InternalName", "bwdc"
              VALUE "LegalCopyright", "Copyright Bitwarden Inc."
            }
          }

          BLOCK "VarFileInfo"
          {
            VALUE "Translation", 0x0409 0x04B0
          }
          }
          "@

          $versionInfo | Out-File ./version-info.rc

      - name: Resource Hacker
        shell: cmd
        run: |
          set PATH=%PATH%;C:\Program Files (x86)\Resource Hacker
          set WIN_PKG=C:\Users\runneradmin\.pkg-cache\v%_WIN_PKG_VERSION%\fetched-v%_WIN_PKG_FETCH_VERSION%-win-x64
          set WIN_PKG_BUILT=C:\Users\runneradmin\.pkg-cache\v%_WIN_PKG_VERSION%\built-v%_WIN_PKG_FETCH_VERSION%-win-x64

          ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action delete -mask ICONGROUP,1,
          ResourceHacker -open version-info.rc -save version-info.res -action compile
          ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action addoverwrite -resource version-info.res

      - name: Install
        run: npm install

      - name: Package CLI
        run: npm run dist:cli

      - name: Zip
        shell: cmd
        run: |
          7z a ./dist-cli/bwdc-windows-%_PACKAGE_VERSION%.zip ./dist-cli/windows/bwdc.exe ./keytar/windows/keytar.node
          7z a ./dist-cli/bwdc-macos-%_PACKAGE_VERSION%.zip ./dist-cli/macos/bwdc ./keytar/macos/keytar.node
          7z a ./dist-cli/bwdc-linux-%_PACKAGE_VERSION%.zip ./dist-cli/linux/bwdc ./keytar/linux/keytar.node

      - name: Version Test
        run: |
          Expand-Archive -Path "./dist-cli/bwdc-windows-${env:_PACKAGE_VERSION}.zip" -DestinationPath "./test/windows"
          $testVersion = Invoke-Expression '& ./test/windows/bwdc.exe -v'
          echo "version: $env:_PACKAGE_VERSION"
          echo "testVersion: $testVersion"
          if($testVersion -ne $env:_PACKAGE_VERSION) {
            Throw "Version test failed."
          }

      - name: Create checksums
        run: |
          checksum -f="./dist-cli/bwdc-windows-${env:_PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-windows-sha256-${env:_PACKAGE_VERSION}.txt
          checksum -f="./dist-cli/bwdc-macos-${env:_PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-macos-sha256-${env:_PACKAGE_VERSION}.txt
          checksum -f="./dist-cli/bwdc-linux-${env:_PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-linux-sha256-${env:_PACKAGE_VERSION}.txt

      - name: Upload Windows Zip to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: bwdc-windows-${{ env._PACKAGE_VERSION }}.zip
          path: ./dist-cli/bwdc-windows-${{ env._PACKAGE_VERSION }}.zip
          if-no-files-found: error

      - name: Upload Mac Zip to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: bwdc-macos-${{ env._PACKAGE_VERSION }}.zip
          path: ./dist-cli/bwdc-macos-${{ env._PACKAGE_VERSION }}.zip
          if-no-files-found: error

      - name: Upload Linux Zip to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: bwdc-linux-${{ env._PACKAGE_VERSION }}.zip
          path: ./dist-cli/bwdc-linux-${{ env._PACKAGE_VERSION }}.zip
          if-no-files-found: error

      - name: Upload Windows checksum to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: bwdc-windows-sha256-${{ env._PACKAGE_VERSION }}.txt
          path: ./dist-cli/bwdc-windows-sha256-${{ env._PACKAGE_VERSION }}.txt
          if-no-files-found: error

      - name: Upload Mac checksum to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: bwdc-macos-sha256-${{ env._PACKAGE_VERSION }}.txt
          path: ./dist-cli/bwdc-macos-sha256-${{ env._PACKAGE_VERSION }}.txt
          if-no-files-found: error

      - name: Upload Linux checksum to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: bwdc-linux-sha256-${{ env._PACKAGE_VERSION }}.txt
          path: ./dist-cli/bwdc-linux-sha256-${{ env._PACKAGE_VERSION }}.txt
          if-no-files-found: error


  windows-gui:
    name: Windows GUI
    runs-on: windows-2019
    needs: setup
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - name: Set up .NET
        uses: actions/setup-dotnet@a71d1eb2c86af85faa8c772c03fb365e377e45ea
        with:
          dotnet-version: "3.1.x"

      - name: Set up Node
        uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea
        with:
          node-version: '14'

      - name: Update NPM
        run: |
          npm install -g npm@7
          npm install -g node-gyp
          node-gyp install $(node -v)

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Print environment
        run: |
          node --version
          npm --version
          dotnet --version

      - name: Install AST
        uses: bitwarden/gh-actions/install-ast@f135c42c8596cb535c5bcb7523c0b2eef89709ac

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Install Node dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

      - name: Build & Sign
        run: npm run dist:win
        env:
          ELECTRON_BUILDER_SIGN: 1
          SIGNING_VAULT_URL: ${{ secrets.SIGNING_VAULT_URL }}
          SIGNING_CLIENT_ID: ${{ secrets.SIGNING_CLIENT_ID }}
          SIGNING_TENANT_ID: ${{ secrets.SIGNING_TENANT_ID }}
          SIGNING_CLIENT_SECRET: ${{ secrets.SIGNING_CLIENT_SECRET }}
          SIGNING_CERT_NAME: ${{ secrets.SIGNING_CERT_NAME }}

      - name: List Dist
        run: dir ./dist

      - name: Upload Portable Executable to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: Bitwarden-Connector-Portable-${{ env._PACKAGE_VERSION }}.exe
          path: ./dist/Bitwarden-Connector-Portable-${{ env._PACKAGE_VERSION }}.exe
          if-no-files-found: error

      - name: Upload Installer Executable to GitHub
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: Bitwarden-Connector-Installer-${{ env._PACKAGE_VERSION }}.exe
          path: ./dist/Bitwarden-Connector-Installer-${{ env._PACKAGE_VERSION }}.exe
          if-no-files-found: error


  linux:
    name: Linux
    runs-on: ubuntu-20.04
    needs: setup
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - name: Set up Node
        uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea
        with:
          node-version: '14'

      - name: Update NPM
        run: |
          npm install -g npm@7
          npm install -g node-gyp
          node-gyp install $(node -v)

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get -y install pkg-config libxss-dev libsecret-1-dev
          sudo apt-get -y install rpm

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: NPM Install
        run: npm install

      - name: NPM Rebuild
        run: npm run rebuild

      - name: NPM Package
        run: npm run dist:lin

      - name: Upload AppImage
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: Bitwarden-Connector-${{ env._PACKAGE_VERSION }}-x86_64.AppImage
          path: ./dist/Bitwarden-Connector-${{ env._PACKAGE_VERSION }}-x86_64.AppImage
          if-no-files-found: error


  macos:
    name: MacOS
    runs-on: macos-11
    needs: setup
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - name: Set up Node
        uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea
        with:
          node-version: '14'

      - name: Update NPM
        run: |
          npm install -g npm@7
          npm install -g node-gyp
          node-gyp install $(node -v)

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV

      - name: Print environment
        run: |
          node --version
          npm --version
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"
        shell: bash

      - name: Checkout repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f  # v2.3.4

      - name: Decrypt secrets
        env:
          DECRYPT_FILE_PASSWORD: ${{ secrets.DECRYPT_FILE_PASSWORD }}
        shell: bash
        run: |
          mkdir -p $HOME/secrets

          gpg --quiet --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" \
            --output "$HOME/secrets/devid-app-cert.p12" \
            "$GITHUB_WORKSPACE/.github/secrets/devid-app-cert.p12.gpg"

          gpg --quiet --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" \
            --output "$HOME/secrets/devid-installer-cert.p12" \
            "$GITHUB_WORKSPACE/.github/secrets/devid-installer-cert.p12.gpg"

          gpg --quiet --batch --yes --decrypt --passphrase="$DECRYPT_FILE_PASSWORD" \
            --output "$HOME/secrets/macdev-cert.p12" \
            "$GITHUB_WORKSPACE/.github/secrets/macdev-cert.p12.gpg"

      - name: Set up keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          DEVID_CERT_PASSWORD: ${{ secrets.DEVID_CERT_PASSWORD }}
          MACDEV_CERT_PASSWORD: ${{ secrets.MACDEV_CERT_PASSWORD }}
        shell: bash
        run: |
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security set-keychain-settings -lut 1200 build.keychain
          security import "$HOME/secrets/devid-app-cert.p12" -k build.keychain -P $DEVID_CERT_PASSWORD \
            -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild
          security import "$HOME/secrets/devid-installer-cert.p12" -k build.keychain -P $DEVID_CERT_PASSWORD \
            -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild
          security import "$HOME/secrets/macdev-cert.p12" -k build.keychain -P $MACDEV_CERT_PASSWORD \
            -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain

      - name: Load package version
        run: |
          $rootPath = $env:GITHUB_WORKSPACE;
          $packageVersion = (Get-Content -Raw -Path $rootPath\src\package.json | ConvertFrom-Json).version;

          Write-Output "Setting package version to $packageVersion";
          Write-Output "PACKAGE_VERSION=$packageVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append;
        shell: pwsh

      - name: Install Node dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run dist:mac
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Rename Zip Artifact
        run: |
          cd dist
          mv "Bitwarden Directory Connector-${{ env._PACKAGE_VERSION }}-mac.zip" \
             "Bitwarden-Connector-${{ env._PACKAGE_VERSION }}-mac.zip"

      - name: Upload .zip artifact
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: Bitwarden-Connector-${{ env._PACKAGE_VERSION }}-mac.zip
          path: ./dist/Bitwarden-Connector-${{ env._PACKAGE_VERSION }}-mac.zip
          if-no-files-found: error

      - name: Upload .dmg artifact
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700  # v2.2.4
        with:
          name: Bitwarden-Connector-${{ env._PACKAGE_VERSION }}.dmg
          path: ./dist/Bitwarden-Connector-${{ env._PACKAGE_VERSION }}.dmg
          if-no-files-found: error


  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-20.04
    needs:
      - cloc
      - setup
      - cli
      - windows-gui
      - linux
      - macos
    steps:
      - name: Check if any job failed
        if: ${{ (github.ref == 'refs/heads/master') || (github.ref == 'refs/heads/rc') }}
        env:
          CLOC_STATUS: ${{ needs.cloc.result }}
          SETUP_STATUS: ${{ needs.setup.result }}
          CLI_STATUS: ${{ needs.cli.result }}
          WINDOWS_GUI_STATUS: ${{ needs.windows-gui.result }}
          LINUX_STATUS: ${{ needs.linux.result }}
          MACOS_STATUS: ${{ needs.macos.result }}
        run: |
          if [ "$CLOC_STATUS" = "failure" ]; then
              exit 1
          elif [ "$SETUP_STATUS" = "failure" ]; then
              exit 1
          elif [ "$CLI_STATUS" = "failure" ]; then
              exit 1
          elif [ "$WINDOWS_GUI_STATUS" = "failure" ]; then
              exit 1
          elif [ "$LINUX_STATUS" = "failure" ]; then
              exit 1
          elif [ "$MACOS_STATUS" = "failure" ]; then
              exit 1
          fi

      - name: Login to Azure - Prod Subscription
        uses: Azure/login@77f1b2e3fb80c0e8645114159d17008b8a2e475a
        if: failure()
        with:
          creds: ${{ secrets.AZURE_PROD_KV_CREDENTIALS }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: Azure/get-keyvault-secrets@80ccd3fafe5662407cc2e55f202ee34bfff8c403
        if: failure()
        with:
          keyvault: "bitwarden-prod-kv"
          secrets: "devops-alerts-slack-webhook-url"

      - name: Notify Slack on failure
        uses: act10ns/slack@e4e71685b9b239384b0f676a63c32367f59c2522  # v1.2.2
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ steps.retrieve-secrets.outputs.devops-alerts-slack-webhook-url }}
        with:
          status: ${{ job.status }}
